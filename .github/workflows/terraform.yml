name: "Terraform Pipeline with GitHub Actions"

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
      - fix/terraform-gh-action

permissions:
  id-token: write
  contents: read
  pull-requests: write

jobs:
  terraform:
    environment:
      name: central
    name: "Terraform Workflow Management"
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: terraform/hello-world

    steps:
      - name: Checkout the repository to the runner
        uses: actions/checkout@v2

      - name: Setup Terraform with specified version on the runner
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.9
          terraform_wrapper: true

      - name: Terraform init
        id: init
        run: terraform init

      - name: Terraform format
        id: fmt
        run: terraform fmt

      - name: Terraform validate
        id: validate
        run: terraform validate

      - name: Terraform plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan
        continue-on-error: true

      - name: Comment on PR
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            const commentBody = "${{ steps.plan.outputs.stdout }}"

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody
            })

          #- name: Comment on PR
          #  uses: actions/github-script@v7
          #  if: github.event_name == 'pull_request'
          #  with:
          #    script: |
          #      const output = `#### Terraform Format and Style ðŸ–Œ\`${{ steps.fmt.outcome }}\`
          #      #### Terraform Initialization ðŸ¤–\`${{ steps.init.outcome }}\`
          #      #### Terraform Validation ðŸ¤–\`${{ steps.validate.outcome }}\`
          #      #### Terraform Plan ðŸ“–\`${{ steps.plan.outcome }}\`
          #      <details><summary>Show Plan</summary>

          #      \`\`\`\n
          #      ${{ steps.plan.outputs.result }}
          #      \`\`\`

          #      </details>

          #      *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

          #      github.rest.issues.createComment({
          #        issue_number: context.issue.number,
          #        owner: context.repo.owner,
          #        repo: context.repo.repo,
          #        body: output
          #      })
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

          #- name: Terraform Apply
          #  if: github.ref == 'refs/heads/main' && github.event_name == 'push'
          #  run: terraform apply -auto-approve -input=false

